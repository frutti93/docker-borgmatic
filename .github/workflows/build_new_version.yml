---
name: 'build tagged'

on:
  push:
    tags:
      - v*

jobs:
  tagged-release:
    name: "Tagged Release"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            *

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare Base Build 
        id: prep_base
        run: |
          DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/borgmatic
          VERSION=latest
          # If this is git tag, use the tag name as a docker tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${VERSION}-base,${DOCKER_IMAGE}:base"

          # If the VERSION looks like a version number, assume that
          # this is the most recent version of the image and also
          # tag it 'latest'.
          if [[ $VERSION =~ ^([0-9]{1,3})\.([0-9]{1,3})\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:${BASH_REMATCH[2]},${DOCKER_IMAGE}:${BASH_REMATCH[2]}.${BASH_REMATCH[3]}"
          fi
          # Set output parameters.
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}

      - name: Prepare MSMTP Build
        id: prep_msmtp
        run: |
          DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/borgmatic
          VERSION=latest
          # If this is git tag, use the tag name as a docker tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}-msmtp,${DOCKER_IMAGE}:msmtp"

          # If the VERSION looks like a version number, assume that
          # this is the most recent version of the image and also
          # tag it 'latest'.
          if [[ $VERSION =~ ^([0-9]{1,3})\.([0-9]{1,3})\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest-msmtp,${DOCKER_IMAGE}:${BASH_REMATCH[2]}-msmtp,${DOCKER_IMAGE}:${BASH_REMATCH[2]}.${BASH_REMATCH[3]}-msmtp"
          fi

          # Set output parameters.
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}

      - name: Prepare NTF Build
        id: prep_ntfy
        run: |
          DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/borgmatic
          VERSION=latest
          # If this is git tag, use the tag name as a docker tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}-ntfy,${DOCKER_IMAGE}:ntfy"
          
          # If the VERSION looks like a version number, assume that
          # this is the most recent version of the image and also
          # tag it 'latest'.
          if [[ $VERSION =~ ^([0-9]{1,3})\.([0-9]{1,3})\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest-ntfy,${DOCKER_IMAGE}:${BASH_REMATCH[2]}-ntfy,${DOCKER_IMAGE}:${BASH_REMATCH[2]}.${BASH_REMATCH[3]}-ntfy"
          fi
          # Set output parameters.
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build_base
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./base
          file: ./base/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
          push: true
          tags: ${{ steps.prep_base.outputs.tags }}

      - name: Build_msmtp
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./msmtp
          file: ./msmtp/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
          push: true
          tags: ${{ steps.prep_msmtp.outputs.tags }}

      - name: Build_ntfy
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./ntfy
          file: ./ntfy/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
          push: true
          tags: ${{ steps.prep_ntfy.outputs.tags }}